<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="10" passed="9">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="6620" started-at="2018-05-25T22:53:55Z" finished-at="2018-05-25T22:54:01Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="6620" started-at="2018-05-25T22:53:55Z" finished-at="2018-05-25T22:54:01Z">
      <class name="TestPackage.TestClass">
        <test-method status="PASS" signature="getAllCountries(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getAllCountries" duration-ms="2374" started-at="2018-05-25T22:53:55Z" data-provider="getAlpha2CodeExistent" finished-at="2018-05-25T22:53:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[US]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllCountries -->
        <test-method status="PASS" signature="getAllCountries(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getAllCountries" duration-ms="534" started-at="2018-05-25T22:53:57Z" data-provider="getAlpha2CodeExistent" finished-at="2018-05-25T22:53:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllCountries -->
        <test-method status="PASS" signature="getAllCountries(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getAllCountries" duration-ms="611" started-at="2018-05-25T22:53:58Z" data-provider="getAlpha2CodeExistent" finished-at="2018-05-25T22:53:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[GB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllCountries -->
        <test-method status="PASS" signature="getEachCountry(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getEachCountry" duration-ms="463" started-at="2018-05-25T22:53:58Z" data-provider="getAlpha2CodeExistent" finished-at="2018-05-25T22:53:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[US]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getEachCountry -->
        <test-method status="PASS" signature="getEachCountry(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getEachCountry" duration-ms="470" started-at="2018-05-25T22:53:59Z" data-provider="getAlpha2CodeExistent" finished-at="2018-05-25T22:53:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getEachCountry -->
        <test-method status="PASS" signature="getEachCountry(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getEachCountry" duration-ms="404" started-at="2018-05-25T22:53:59Z" data-provider="getAlpha2CodeExistent" finished-at="2018-05-25T22:53:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[GB]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getEachCountry -->
        <test-method status="PASS" signature="getInexistentCountries(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getInexistentCountries" duration-ms="384" started-at="2018-05-25T22:54:00Z" data-provider="getAlpha2CodeInExistent" finished-at="2018-05-25T22:54:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[TDD]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getInexistentCountries -->
        <test-method status="PASS" signature="getInexistentCountries(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getInexistentCountries" duration-ms="409" started-at="2018-05-25T22:54:00Z" data-provider="getAlpha2CodeInExistent" finished-at="2018-05-25T22:54:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[BDD]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getInexistentCountries -->
        <test-method status="PASS" signature="getInexistentCountries(java.lang.String)[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="getInexistentCountries" duration-ms="416" started-at="2018-05-25T22:54:00Z" data-provider="getAlpha2CodeInExistent" finished-at="2018-05-25T22:54:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[TTD]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getInexistentCountries -->
        <test-method status="FAIL" signature="postInExistentCountries()[pri:0, instance:TestPackage.TestClass@59fa1d9b]" name="postInExistentCountries" duration-ms="501" started-at="2018-05-25T22:54:01Z" finished-at="2018-05-25T22:54:01Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <400>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <400>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:482)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:654)
at sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:210)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:166)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:124)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:132)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:119)
at TestPackage.TestClass.postInExistentCountries(TestClass.java:74)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postInExistentCountries -->
      </class> <!-- TestPackage.TestClass -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
